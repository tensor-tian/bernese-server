package main

import (
	"go/scanner"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

func main() {
	code, err := ioutil.ReadAll(os.Stdin)
	if err != nil {
		log.Fatal(err)
	}
	os.Stdout.Write([]byte(segmetation(code)))
}

func segmetation(code []byte) string {
	var s scanner.Scanner
	fset := token.NewFileSet()
	file := fset.AddFile("", fset.Base(), len(code))
	s.Init(file, code, nil, scanner.ScanComments)

	var sb strings.Builder
	var lastRune = byte('_')
	for {
		_, tok, lit := s.Scan()
		if tok == token.EOF {
			break
		}
		word := tok.String()
		if tok.IsLiteral() || tok == token.SEMICOLON {
			word = lit
		}
		if tok == token.COMMENT {
			word = lit + "\n"
		}
		if lastRune == ' ' && len(word) > 0 && word[0] == ' ' {
			sb.WriteString(word[1:])
			if len(word) > 1 {
				lastRune = word[len(word)-1]
			}
		} else if lastRune == ' ' || len(word) > 0 && word[0] == ' ' {
			if len(word) > 0 {
				sb.WriteString(word)
				lastRune = word[len(word)-1]
			}
		} else {
			sb.WriteByte(' ')
			if len(word) > 0 {
				sb.WriteString(word)
				lastRune = word[len(word)-1]
			}
		}
	}
	return sb.String()
}
